#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
app_name=$(basename $(dirname $(dirname $dir)))
arch=""

cd "${dir}/../.."

case $(uname -a) in
  *amd64* | *x_86* | *x86_64* )
    arch="x86" ;;
  *arm* )
    arch="arm" ;;
esac

img="quay.io/skilbjo/$app_name:$arch"
job_cmd="usr/local/deploy/bin/run-job"

get_current_artifacts(){
  # any scripts need updating?
  git pull -f

  # remove all app containers
  docker ps -a | grep "$app_name" | awk '{print $1}' | uniq | xargs docker rm -f

  # remove all app images
  docker images | grep "$app_name" | awk '{print $3}' | uniq | xargs docker rmi -f
}

# Create it
with_db() {
  docker run --rm \
    --name="$app_name" \
    --detach \
    --tty \
    -p 8080:8080 \
    -p 8443:8443 \
    -e ro_jdbc_db_uri="$(echo $ro_jdbc_db_uri)" \
    -e quandl_api_key="$(echo $quandl_api_key)" \
    -e healthchecks_io_compojure="$(echo $healthchecks_io_compojure)" \
    "$img" \
    bash
}

with_athena(){
  # long story with this, but it seems portforwarding 443->8443 seems to bork the
  # server's understanding of SSL. when app makes calls to other services using ssl
  # ie athena is served over 443, and compojure fails
  # full error: https://confluence.atlassian.com/kb/connecting-to-ssl-services-802171215.html
  # javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
  # https://curl.haxx.se/docs/sslcerts.html
  sudo docker run --rm \
    --name="$app_name" \
    --detach \
    --tty \
    -p 80:8080 \
    -p 443:8443 \
    -e ro_jdbc_db_uri="$(echo $ro_jdbc_db_uri)" \
    -e quandl_api_key="$(echo $quandl_api_key)" \
    -e jdbc_athena_uri="$(echo $jdbc_athena_uri)" \
    -e healthchecks_io_compojure="$(echo $healthchecks_io_compojure)" \
    "$img" \
    bash
}

# Download the image, and start the app detached
start_detached(){
  set +u
  if [[ -z $jdbc_athena_uri ]]; then
    with_db
  else
    with_athena
  fi
  set -u
}

# Update repo, clear cache
get_current_artifacts &&
  start_detached

# Drop in the file. Env var won't work :/
docker cp ~/java_key_store "${app_name}:/java_key_store"

# Start it with the intended entrypoint
docker exec "$app_name" \
  "$job_cmd" $@
