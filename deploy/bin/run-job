#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )" && cd "$dir"
app="$(basename $(pwd))"
tmp_dir='/tmp'

get_artifact_from_aws(){
  aws s3 cp --profile skilbjo-robot "s3://skilbjo/${app}.jar" "${dir}/app.jar"
}

get_artifact_from_circle_ci(){
  local url='https://circleci.com/api/v1.1/project/github/skilbjo/aeon'
  local last_build_num="$(curl "${url}/tree/master?circle-token=${circleci_aeon_api_key}" | \
    jq -r '.[0].build_num')"
  local artifact_url="$(curl "${url}/${last_build_num}/artifacts?circle-token=${circleci_aeon_api_key}" | \
    jq -r '.[0].url')"

  curl "$artifact_url" >"${tmp_dir}/${app}.jar"
}

# Prereqs
case "$(uname -m)" in
  arm* )
    deploy_dir='/usr/local/deploy/bin'
    set +e; eval "${deploy_dir}/apk-arm"; update-ca-certificates; apk fix || echo 'Unable to reach apk...'; set -e; # set +e when apk not available
    mv /app.jar "${tmp_dir}/${app}.jar" ;;
esac

case "$(uname)" in
  FreeBSD | Darwin )
    # virtualbox is fucked in FreeBSD 11.2-RELEASE
    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228535
    # Docker only runs natively on Linux (not BSD), so let's just run the jar
    if [[ ! -f ${tmp_dir}/java_key_store ]]; then
      aws s3 cp --profile skilbjo-robot s3://skilbjo/java_key_store "${tmp_dir}/java_key_store"
    fi

    if [[ -f ${tmp_dir}/${app}.jar ]]; then rm "${tmp_dir}/${app}.jar"; fi
    get_artifact_from_circle_ci

    set +e; pkill java -u skilbjo -nx; set -e
    JAVA_OPTS="-Duser.timezone=UTC -Xms256m -Xmx1g -XX:MaxMetaspaceSize=128m" # The flags below are to try to resolve "java.lang.OutOfMemoryError: GC overhead limit exceeded" errors
    JAVA_OPTS="${JAVA_OPTS} -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:+UseCompressedOops -XX:+DoEscapeAnalysis -Xincgc" ;; # Note: -XX:+UseCompressedOops for 64bit only
esac

cmd="java $JAVA_OPTS -jar ${tmp_dir}/${app}.jar"
exec $cmd $@
