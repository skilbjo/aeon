#!/usr/bin/env bash
set -eou pipefail

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd )" && cd "$dir"
app="$(basename $(pwd))"
tmp_dir='/tmp'
jmx=''

usage(){ echo "Usage: ${0} [-jmx <direct-etl|testing|...>]" 1>&2;
  echo " <jmx: optional.. start a jmx listener to monitor w/ VisualVM'>" 1>&2; exit 1; }
while [[ $# -gt 0 ]]; do
  case "$1" in
    -jmx|--jmx)  jmx='y' ;;
  esac
  shift
done

get_artifact_from_aws(){
  aws s3 cp --profile skilbjo-robot "s3://skilbjo/${app}.jar" "${dir}/app.jar"
}

get_artifact_from_circle_ci(){
  local url='https://circleci.com/api/v1.1/project/github/skilbjo/aeon'
  local last_build_num="$(curl "${url}/tree/master?circle-token=${circleci_aeon_api_key}" | \
    jq -r '.[0].build_num')"
  local artifact_url="$(curl "${url}/${last_build_num}/artifacts?circle-token=${circleci_aeon_api_key}" | \
    jq -r '.[0].url')"

  curl -L "$artifact_url" >"${tmp_dir}/${app}.jar" # -L to follow redirects
}

# Prereqs
case "$(uname -m)" in
  arm* )
    deploy_dir='/usr/local/deploy/bin'
    set +e; eval "${deploy_dir}/apk-arm"; update-ca-certificates; apk fix || echo 'Unable to reach apk...'; set -e; # set +e when apk not available
    mv /app.jar "${tmp_dir}/${app}.jar" ;;
esac

case "$(uname)" in
  FreeBSD | Darwin )
    # virtualbox is fucked in FreeBSD 11.2-RELEASE
    # https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=228535
    # Docker only runs natively on Linux (not BSD), so let's just run the jar
    if [[ ! -f ${tmp_dir}/java_key_store ]]; then
      aws s3 cp --profile skilbjo-robot s3://skilbjo/java_key_store "${tmp_dir}/java_key_store"
    fi

    if [[ -f ${tmp_dir}/${app}.jar ]]; then rm "${tmp_dir}/${app}.jar"; fi
    get_artifact_from_circle_ci

    set +e; pkill java -Duser.timezone=UTC -u skilbjo -nx; set -e
    JAVA_OPTS="-Duser.timezone=UTC -Xms256m -Xmx1g -XX:MaxMetaspaceSize=128m" # The flags below are to try to resolve "java.lang.OutOfMemoryError: GC overhead limit exceeded" errors
    java_garbage_collector_opts='-XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -XX:+UseCompressedOops -XX:+DoEscapeAnalysis -Xincgc' # Note: -XX:+UseCompressedOops for 64bit only
    jmx_opts=''

    if [[ -n $jmx ]]; then
      if [[ $(uname) == 'Darwin' ]]; then
        ip="$(ifconfig en0 | grep 'inet ' | awk '{print $2}')" # udoo is re0, osx is en0
      elif [[ $(uname) == 'FreeBSD' ]]; then
        ip="$(ifconfig re0 | grep 'inet ' | awk '{print $2}')" # udoo is re0, osx is en0
      fi

      #jmx_opts="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=true -Djava.rmi.server.hostname=${ip} -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9011 -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.ssl.need.client.auth=true -Djavax.net.ssl.keyStore=/tmp/java_key_store -Djavax.net.ssl.keyStorePassword="$(echo "$quandl_api_key")" -Dcom.sun.management.jmxremote.password.file=/tmp/jmx.password -Dcom.sun.management.jmxremote.access.file=/tmp/jmxremote.access" # don't quote /tmp/jmx.password  ## This doesn't work
      # formally -Djava.rmi.server.hostname=pfsense2. was set as localhost
      #   it worked as localhost as of 12/31/2019, but as of 6/15/2020 it was not working
      #   changed to pfsense2. and 192.168.3.49 and each worked, but localhost did not
      jmx_opts='-Djava.rmi.server.hostname=pfsense2. -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=9010 -Dcom.sun.management.jmxremote.rmi.port=9011 -Dcom.sun.management.jmxremote.local.only=false'
    fi

    JAVA_OPTS="$JAVA_OPTS $java_garbage_collector_opts $jmx_opts"
    ;;
esac

cmd="java $JAVA_OPTS -jar ${tmp_dir}/${app}.jar"
exec $cmd $@
